{"version":3,"sources":["contexts/EthContext/EthContext.js","contexts/EthContext/state.js","contexts/EthContext/EthProvider.jsx","contexts/EthContext/useEth.js","workflow.jsx","Header.jsx","App.jsx","index.js"],"names":["EthContext","createContext","actions","initialState","artifact","web3","accounts","networkID","contract","owned","status","reducer","state","action","type","data","Error","EthProvider","children","useReducer","dispatch","init","useCallback","Web3","givenProvider","eth","requestAccounts","net","getId","abi","address","networks","Contract","err","console","error","methods","owner","call","workflowStatus","useEffect","tryInit","require","events","handleChange","forEach","e","window","ethereum","on","removeListener","Provider","value","useEth","useContext","Workflow","options","fromBlock","toBlock","options1","voterAdd","voterProp","resultProp","voterVotedId","useState","setStatus","voters","setVoter","proposals","setProposals","hasVoted","setVoted","winner","setWinner","proposalsFinal","setPropFinal","votersFinal","setVoterFinal","inputVoter","useRef","inputProposals","inputVoteId","handleVoterButtonClick","registerVoters","current","send","from","handleProposalsButtonClick","registerProposals","handleVoteButtonClick","vote","propRecap","getOneProposal","recap","push","WorkflowStatusChange","event","returnValues","newStatus","getPastEvents","then","result","map","addresse","addr","voterAddress","catch","log","Voted","addressVoter","voter","voteId","proposalId","id","status1","startProposalsRegistration","status2","endProposalsRegistration","status3","startVotingSession","status4","endVotingSession","status5","votesTallied","getWin","getWinner","whoWin","description","i","length","reverse","className","placeholder","ref","onClick","proposal","desc","voteCount","htmlFor","Header","App","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.b6035ef1.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst EthContext = createContext();\n\nexport default EthContext;\n","const actions = {\n  init: \"INIT\",\n};\n\nconst initialState = {\n  artifact: null,\n  web3: null,\n  accounts: null,\n  networkID: null,\n  contract: null,\n  owned: null,\n  status: null,\n};\n\nconst reducer = (state, action) => {\n  const { type, data } = action;\n  switch (type) {\n    case actions.init:\n      return { ...state, ...data };\n    default:\n      throw new Error(\"Undefined reducer action type\");\n  }\n};\n\nexport { actions, initialState, reducer };\n","import React, { useReducer, useCallback, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport EthContext from \"./EthContext\";\nimport { reducer, actions, initialState } from \"./state\";\n\nfunction EthProvider({ children }) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const init = useCallback(\n    async artifact => {\n      if (artifact) {\n        const web3 = new Web3(Web3.givenProvider || \"ws://localhost:8545\");\n        const accounts = await web3.eth.requestAccounts();\n        const networkID = await web3.eth.net.getId();\n        const { abi } = artifact;\n        let address, contract;\n        try {\n          address = artifact.networks[networkID].address;\n          contract = new web3.eth.Contract(abi, address);\n      \n        } catch (err) {\n          console.error(err);\n        };\n        const owner = await contract.methods.owner().call();\n        let owned = accounts[0] === owner;\n        const status = await contract.methods.workflowStatus().call();\n        \n        \n        dispatch({\n          type: actions.init,\n          data: { artifact, web3, accounts, networkID, contract, owned, status }\n        });\n      }\n    }, []);\n\n  useEffect(() => {\n    const tryInit = async () => {\n      try {\n        const artifact = require(\"../../contracts/Voting.json\");\n        init(artifact);\n      } catch (err) {\n        console.error(err);\n      }\n    };\n\n    tryInit();\n  }, [init]);\n\n  useEffect(() => {\n    const events = [\"chainChanged\", \"accountsChanged\"];\n    const handleChange = () => {\n      init(state.artifact);\n    };\n\n    events.forEach(e => window.ethereum.on(e, handleChange));\n    return () => {\n      events.forEach(e => window.ethereum.removeListener(e, handleChange));\n    };\n  }, [init, state.artifact]);\n\n\n  return (\n    <EthContext.Provider value={{\n      state,\n      dispatch\n    }}>\n      {children}\n    </EthContext.Provider>\n  );\n}\n\nexport default EthProvider;\n","import { useContext } from \"react\";\nimport EthContext from \"./EthContext\";\n\nconst useEth = () => useContext(EthContext);\n\nexport default useEth;\n","import useEth from \"./contexts/EthContext/useEth\";\nimport { useState, useRef } from \"react\";\n\nfunction Workflow() {\n  const { state: { contract, accounts, owned } } = useEth();\n\n  let options = {\n    fromBlock: 0,\n    toBlock: 'latest'\n  };\n\n  let options1 = {\n    fromBlock: 0\n  };\n\n  let voterAdd = [];\n  let voterProp = [];\n  let resultProp = [];\n  let voterVotedId = [];\n  const [status, setStatus] = useState(\"0\");\n  const [voters, setVoter] = useState([]);\n  const [proposals, setProposals] = useState([]);\n  const [hasVoted, setVoted] = useState(false)\n  const [winner, setWinner] = useState();\n  const [proposalsFinal, setPropFinal] = useState([])\n  const [votersFinal, setVoterFinal] = useState([])\n  const inputVoter = useRef(null);\n  const inputProposals = useRef(null);\n  const inputVoteId = useRef(null);\n\n  const handleVoterButtonClick = async () => {\n    await contract.methods.registerVoters(inputVoter.current.value).send({ from: accounts[0] });\n    setVoter(voterAdd);\n  }\n\n  const handleProposalsButtonClick = async () => {\n    await contract.methods.registerProposals(inputProposals.current.value).send({ from: accounts[0] });\n    setProposals(voterProp);\n  }\n  \n  const handleVoteButtonClick = async () => {\n    await contract.methods.vote(inputVoteId.current.value).send({ from: accounts[0] });\n    setVoted(true);\n  }\n\n  const propRecap = async (e) => {\n    const recap = await contract.methods.getOneProposal(e).call({ from: accounts[0] });\n    resultProp.push(recap);\n  }\n  \n  // voterProp[event.returnValues.proposalId].voteCount + 1\n\n  if (contract) {\n    \n\n\n    // --------- LISTENERS --------- //\n\n    // WORKFLOW STATUS //\n    \n    contract.events.WorkflowStatusChange(options1)\n      .on('data', event => setStatus( event.returnValues.newStatus))\n  \n\n    // VOTER //\n\n    contract.getPastEvents('VoterRegistered', options)\n    .then((result) => {\n      result.map((addresse) => {\n        voterAdd.push({ addr: addresse.returnValues.voterAddress });\n        setVoter(voterAdd);\n      });\n    }).catch((err) => {\n      console.log(err);\n    });\n    \n    // PROPOSALS //\n    \n    contract.getPastEvents('ProposalRegistered', options)\n    .then((result) => {\n      result.map((addresse) => {\n        voterProp.push(addresse.returnValues);\n        setProposals(voterProp);\n      });\n    }).catch((err) => {\n      console.log(err);\n    });\n    \n    // VOTE ID //\n    \n    contract.events.Voted(options1)\n      .on('data', event => {\n        let addressVoter = event.returnValues.voter;\n        let voteId = event.returnValues.proposalId;\n        voterVotedId.push({ addr: addressVoter, id: voteId })\n        setVoterFinal(voterVotedId)\n      }\n        )  \n\n    // console.log(voterProp[parseInt(event.returnValues.proposalId)])\n                  // ------ SET WORKFLOWSTATUS ------ //\n      \n      // const takeWorkFlow = async () => {\n      //   const workflow = await contract.methods.workflowStatus().call({from: accounts[0]});\n      //   // setStatus(workflow)\n      // };\n      \n      // takeWorkFlow();\n  \n    \n      const status1 = async () => {\n      await contract.methods.startProposalsRegistration().send({ from: accounts[0] });\n      // takeWorkFlow();\n    }\n    \n    const status2 = async () => {\n      await contract.methods.endProposalsRegistration().send({ from: accounts[0] });\n      // takeWorkFlow();\n    }\n\n    const status3 = async () => {\n      await contract.methods.startVotingSession().send({ from: accounts[0] });\n      // takeWorkFlow();\n    }\n    \n    const status4 = async () => {\n      await contract.methods.endVotingSession().send({ from: accounts[0] });\n      // takeWorkFlow();\n    }\n    \n    const status5 = async () => {\n      await contract.methods.votesTallied().send({ from: accounts[0] });\n      // takeWorkFlow();\n    }\n      \n    const getWin = async () => {\n      const whoWin = await contract.methods.getWinner().call({ from: accounts[0] });\n      setWinner(whoWin.description);\n      for (let i = 0; i < proposals.length; i++) {\n        propRecap(i);  \n      };\n      resultProp.reverse();\n      setPropFinal(resultProp)\n    }\n\n\n    if (owned && status === \"0\") {\n      return (\n        <div className=\"owner\">\n\n        <div className=\"vote\">\n            <h1>\n        Enregistrement des votants\n        </h1>\n        <input type=\"text\" placeholder=\"address\" ref={inputVoter} />\n        <button onClick={handleVoterButtonClick}>Ajouter un voter</button>\n        <br />\n        <br />\n        <br />\n        <table>\n                  <thead>\n                    <th>Adresse</th>\n                  </thead>\n                <tbody>\n                {voters.map(voter => (\n                  <tr key={voter.id}>\n                    <td>{voter.addr}</td>\n                  </tr>\n                ))}\n                </tbody>\n              </table>\n\n        <br />\n        <br />\n        <br />\n        <button onClick={status1}>\n              Lancer les propositions\n            </button>\n      </div>\n    </div>\n      );\n    }\n      \n      if (status === \"0\") {\n        return (\n          <div className=\"user\">\n            <div className=\"vote\">\n\n          <h1>\n        Enregistrement des votants\n        </h1>\n            <table>\n                  <thead>\n                    <th>Adresse</th>\n                  </thead>\n                <tbody>\n                {voters.map(voter => (\n                  <tr key={voter.id}>\n                    <td>{voter.addr}</td>\n                  </tr>\n                ))}\n                </tbody>\n              </table>\n          </div>\n                </div>\n            )\n\n      }\n      \n      if (owned && status === \"1\") {\n        return (\n          <div className=\"owner\">\n          <div className=\"vote\">\n              <h1>\n              Faites vos propositions !\n            </h1>\n         \n            <input type=\"text\" placeholder=\"string\" ref={inputProposals} />\n            <button onClick={handleProposalsButtonClick}>Ajouter une proposition</button>\n            <br />\n            <br />\n            <br />\n            <table>\n                <thead>\n                  <th>ID</th>\n                  <th>Description</th>\n                </thead>\n              <tbody>\n            {proposals.map(proposal => (\n              <tr key={proposal.id}>\n                <td>{proposal.proposalId}</td>\n                <td>{proposal.desc}</td>\n                <td>{proposal.voteCount}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table> \n            \n            <button onClick={status2}>\n              Fin des propositions\n            </button>\n            <details>\n            <summary>Liste des votants</summary>\n            <table>\n                  <thead>\n                    <th>Adresse</th>\n                  </thead>\n                <tbody>\n                {voters.map(voter => (\n                  <tr key={voter.id}>\n                    <td>{voter.addr}</td>\n                  </tr>\n                ))}\n                </tbody>\n              </table>      \n            </details>\n            </div>\n            </div>\n            )\n\n      }\n\n      \n      if (status === \"1\") {\n        return (\n          <div className=\"user\">\n\n          <div className=\"vote\">\n          <h1>\n              Faites vos propositions !\n            </h1>\n            \n            <input type=\"text\" placeholder=\"string\" ref={inputProposals} />\n            <button onClick={handleProposalsButtonClick}>Ajouter une proposition</button>\n            \n            <table>\n                <thead>\n                  <th>ID</th>\n                  <th>Description</th>\n                </thead>\n              <tbody>\n            {proposals.map(proposal => (\n              <tr key={proposal.id}>\n                <td>{proposal.proposalId}</td>\n                <td>{proposal.desc}</td>\n                <td>{proposal.voteCount}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n\n            <details>\n            <summary>Liste des votants</summary>\n            <table>\n                  <thead>\n                    <th>Adresse</th>\n                  </thead>\n                <tbody>\n                {voters.map(voter => (\n                  <tr key={voter.id}>\n                    <td>{voter.addr}</td>\n                  </tr>\n                ))}\n                </tbody>\n              </table>    \n            </details>\n          </div>\n          </div>\n        )\n\n      }\n      \n      if (owned && status === \"2\") {\n        return (\n          <div className=\"owner\">\n\n          <div className=\"vote\">\n              <h1>\n              Fin des propositions, le vote commence bientôt !\n            </h1>\n            <button onClick={status3}>\n              Début du vote\n            </button>\n\n            <details>\n            <summary>Liste des votants</summary>\n            <table>\n                  <thead>\n                    <th>Adresse</th>\n                  </thead>\n                <tbody>\n                {voters.map(voter => (\n                  <tr key={voter.id}>\n                    <td>{voter.addr}</td>\n                  </tr>\n                ))}\n                </tbody>\n              </table>    \n            </details>\n            <details>\n              <summary>Tableau des propositions</summary>\n              <table>\n                <thead>\n                  <th>ID</th>\n                  <th>Description</th>\n                </thead>\n              <tbody>\n            {proposals.map(proposal => (\n              <tr key={proposal.id}>\n                <td>{proposal.proposalId}</td>\n                <td>{proposal.desc}</td>\n                <td>{proposal.voteCount}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n            </details>\n            </div>\n          </div>\n        )\n\n      }\n    \n      if (status === \"2\") {\n        return (\n          <div className=\"user\">\n\n          <div className=\"vote\">\n          <h1>\n              Fin des propositions, le vote commence bientôt !\n            </h1>\n\n            <details>\n            <summary>Liste des votants</summary>\n            <table>\n                  <thead>\n                    <th>Adresse</th>\n                  </thead>\n                <tbody>\n                {voters.map(voter => (\n                  <tr key={voter.id}>\n                    <td>{voter.addr}</td>\n                  </tr>\n                ))}\n                </tbody>\n              </table>     \n            </details>\n            <details>\n              <summary>Tableau des propositions</summary>\n              <table>\n                <thead>\n                  <th>ID</th>\n                  <th>Description</th>\n                </thead>\n              <tbody>\n            {proposals.map(proposal => (\n              <tr key={proposal.id}>\n                <td>{proposal.proposalId}</td>\n                <td>{proposal.desc}</td>\n                <td>{proposal.voteCount}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n            </details>\n            </div>\n          </div>\n        )\n\n      }\n      \n      if (owned && status === \"3\") {\n        return (\n          <div className=\"owner\">\n            \n          <div className=\"vote\">\n            \n            <h1>\n              Votez !!!\n            </h1>\n\n            <label htmlFor=\"Vote\">Choisissez votre proposition favorite</label>\n            <br />\n            <input type=\"number\" placeholder=\"Id de la proposition\" ref={inputVoteId} />\n            <button onClick={handleVoteButtonClick}>Voter</button>\n\n\n            <button onClick={status4}>\n              Fin du vote\n            </button>\n\n            <details>\n            <summary>Liste des votants</summary>\n            <table>\n                  <thead>\n                    <th>Adresse</th>\n                  </thead>\n                <tbody>\n                {voters.map(voter => (\n                  <tr key={voter.id}>\n                    <td>{voter.addr}</td>\n                  </tr>\n                ))}\n                </tbody>\n              </table>     \n            </details>\n            <details>\n              <summary>Tableau des propositions</summary>\n              <table>\n                <thead>\n                  <th>ID</th>\n                  <th>Description</th>\n                </thead>\n              <tbody>\n            {proposals.map(proposal => (\n              <tr key={proposal.id}>\n                <td>{proposal.proposalId}</td>\n                <td>{proposal.desc}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n            </details>\n            </div>\n          </div>\n        )\n\n      }\n    \n      if (owned && hasVoted && status === \"3\") {\n        return (\n          <div className=\"owner\">\n            \n          <div className=\"vote\">\n          <h1>\n              Votez !!!\n            </h1>\n              \n            <p>A voté !</p>\n\n\n\n            <button onClick={status4}>\n              Fin du vote\n            </button>\n\n            <details>\n            <summary>Liste des votants</summary>\n            <table>\n                  <thead>\n                    <th>Adresse</th>\n                  </thead>\n                <tbody>\n                {voters.map(voter => (\n                  <tr key={voter.id}>\n                    <td>{voter.addr}</td>\n                  </tr>\n                ))}\n                </tbody>\n              </table>     \n            </details>\n            <details>\n              <summary>Tableau des propositions</summary>\n              <table>\n                <thead>\n                  <th>ID</th>\n                  <th>Description</th>\n                </thead>\n              <tbody>\n            {proposals.map(proposal => (\n              <tr key={proposal.id}>\n                <td>{proposal.proposalId}</td>\n                <td>{proposal.desc}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n            </details>\n            </div>\n          </div>\n        )\n\n      }\n    \n      if (hasVoted && status === \"3\") {\n        return (\n          <div className=\"user\">\n\n          <div className=\"vote\">\n          <h1>\n              Votez !!!\n            </h1>\n            \n              <p>A voté !</p>\n\n            <details>\n            <summary>Liste des votants</summary>\n            <table>\n                  <thead>\n                    <th>Adresse</th>\n                  </thead>\n                <tbody>\n                {voters.map(voter => (\n                  <tr key={voter.id}>\n                    <td>{voter.addr}</td>\n                  </tr>\n                ))}\n                </tbody>\n              </table>      \n            </details>\n            <details>\n              <summary>Tableau des propositions</summary>\n              <table>\n                <thead>\n                  <th>ID</th>\n                  <th>Description</th>\n                </thead>\n              <tbody>\n            {proposals.map(proposal => (\n              <tr key={proposal.id}>\n                <td>{proposal.proposalId}</td>\n                <td>{proposal.desc}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n            </details>\n            </div>\n          </div>\n        )\n\n      }\n      \n      if (status === \"3\") {\n        return (\n          <div className=\"user\">\n\n          <div className=\"vote\">\n          <h1>\n              Votez !!!\n            </h1>\n            <label htmlFor=\"Vote\">Choisissez votre proposition favorite</label>\n            <br />\n            <input type=\"number\" placeholder=\"Id de la proposition\" ref={inputVoteId} />\n            <button onClick={handleVoteButtonClick}>Voter</button>\n\n            <details>\n            <summary>Liste des votants</summary>\n            <table>\n                  <thead>\n                    <th>Adresse</th>\n                  </thead>\n                <tbody>\n                {voters.map(voter => (\n                  <tr key={voter.id}>\n                    <td>{voter.addr}</td>\n                  </tr>\n                ))}\n                </tbody>\n              </table>      \n            </details>\n            <details>\n              <summary>Tableau des propositions</summary>\n              <table>\n                <thead>\n                  <th>ID</th>\n                  <th>Description</th>\n                </thead>\n              <tbody>\n            {proposals.map(proposal => (\n              <tr key={proposal.id}>\n                <td>{proposal.proposalId}</td>\n                <td>{proposal.desc}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n            </details>\n            </div>\n          </div>\n        )\n\n      }\n      \n      if (owned && status === \"4\") {\n        return (\n          <div className=\"owner\">\n\n          <div className=\"vote\">\n              <h1>\n                \n              Fin des votes ! Merci à tous d'avoir participé ! <br />\n              Les résultats seront bientôt en ligne\n            </h1>\n           \n            <button onClick={status5}>\n              Annoncer le vainqueur \n            </button>\n\n            <details>\n            <summary>Liste des votants</summary>\n            <table>\n                  <thead>\n                    <th>Adresse</th>\n                  </thead>\n                <tbody>\n                {voters.map(voter => (\n                  <tr key={voter.id}>\n                    <td>{voter.addr}</td>\n                  </tr>\n                ))}\n                </tbody>\n              </table>  \n            </details>\n            <details>\n              <summary>Tableau des propositions</summary>\n              <table>\n                <thead>\n                  <th>ID</th>\n                  <th>Description</th>\n                </thead>\n              <tbody>\n            {proposals.map(proposal => (\n              <tr key={proposal.id}>\n                <td>{proposal.proposalId}</td>\n                <td>{proposal.desc}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n            </details>\n            </div>\n          </div>\n        )\n\n      }\n    \n      if (status === \"4\") {\n        return (\n          <div className=\"user\">\n\n          <div className=\"vote\">\n          <h1>\n                \n                Fin des votes ! Merci à tous d'avoir participé ! <br />\n                Les résultats seront bientôt en ligne\n              </h1>\n\n            <details>\n            <summary>Liste des votants</summary>\n            <table>\n                  <thead>\n                    <th>Adresse</th>\n                  </thead>\n                <tbody>\n                {voters.map(voter => (\n                  <tr key={voter.id}>\n                    <td>{voter.addr}</td>\n                  </tr>\n                ))}\n                </tbody>\n              </table>     \n            </details>\n            <details>\n              <summary>Tableau des propositions</summary>\n              <table>\n                <thead>\n                  <th>ID</th>\n                  <th>Description</th>\n                </thead>\n              <tbody>\n            {proposals.map(proposal => (\n              <tr key={proposal.id}>\n                <td>{proposal.proposalId}</td>\n                <td>{proposal.desc}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n            </details>\n            </div>\n          </div>\n        )\n\n      }\n      \n      if (owned && status === \"5\") {\n        return (\n          <div className=\"owner\">\n\n          <div className=\"vote\">\n            <button onClick={getWin}>\n              Découvrir le gagnant\n            </button>\n            <br />\n            <p>Le gagnant est</p>\n            \n            {winner}\n\n            <br />\n            <table>\n                <thead>\n                  <th>Description</th>\n                  <th>Nombre de voix</th>\n                </thead>\n              <tbody>\n            {proposalsFinal.map(proposal => (\n              <tr key={proposal.id}>\n                <td>{proposal.description}</td>\n                <td>{proposal.voteCount}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        <details>\n            <summary>Liste des votants</summary>\n            <table>\n                  <thead>\n                    <th>Adresse</th>\n                    <th>ID du vote</th>\n                  </thead>\n                <tbody>\n                {votersFinal.map(voter => (\n                  <tr key={voter.id}>\n                    <td>{voter.addr}</td>\n                    <td>{voter.id}</td>\n                  </tr>\n                ))}\n                </tbody>\n              </table>   \n            </details>\n            \n            </div>\n          </div>\n        )\n\n      }\n    \n      if (status === \"5\") {\n        return (\n          <div className=\"user\">\n\n          <div className=\"vote\">\n            <button onClick={getWin}>\n                Découvrir le gagnant\n              </button>\n            <br />\n            <p>Le gagnant est</p>\n            \n            {winner}\n\n            <br />\n            <table>\n                <thead>\n                  <th>Description</th>\n                  <th>Nombre de voix</th>\n                </thead>\n              <tbody>\n            {proposalsFinal.map(proposal => (\n              <tr key={proposal.id}>\n                <td>{proposal.description}</td>\n                <td>{proposal.voteCount}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        <details>\n            <summary>Liste des votants</summary>\n            <table>\n                  <thead>\n                    <th>Adresse</th>\n                    <th>ID du vote</th>\n                  </thead>\n                <tbody>\n                {votersFinal.map(voter => (\n                  <tr key={voter.id}>\n                    <td>{voter.addr}</td>\n                    <td>{voter.id}</td>\n                  </tr>\n                ))}\n                </tbody>\n              </table>      \n            </details>\n            <p></p>\n            </div>\n          </div>\n        )\n\n      }\n\n      \n  \n  \n  }\n  \n}\n\nexport default Workflow;","import useEth from \"./contexts/EthContext/useEth\";\n\nfunction Header() {\n  const { state: { contract, accounts } } = useEth();\n\n  if (contract)\n    return (\n      <div className=\"header\">\n        <span>{accounts[0]}</span>\n      </div>\n    )\n}\n\nexport default Header","import { EthProvider } from \"./contexts/EthContext\";\nimport Workflow from \"./workflow\";\nimport Header from \"./Header\"\nimport \"./App.css\";\n\nfunction App() {\n\n  return (\n    \n    <EthProvider>\n      \n      <div id=\"App\" >\n\n        <div className=\"container\">\n          \n          <Header/>\n          <Workflow />\n\n        </div>\n\n      </div>\n    </EthProvider>\n  );\n\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n"],"sourceRoot":""}